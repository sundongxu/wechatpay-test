// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: demo.proto

#include "demo.pb.h"
#include "demo.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace demo {

static const char* ServerService_method_names[] = {
  "/demo.ServerService/Register",
  "/demo.ServerService/Login",
  "/demo.ServerService/Logout",
  "/demo.ServerService/Interact",
};

std::unique_ptr< ServerService::Stub> ServerService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ServerService::Stub> stub(new ServerService::Stub(channel));
  return stub;
}

ServerService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Register_(ServerService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Login_(ServerService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Logout_(ServerService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Interact_(ServerService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ServerService::Stub::Register(::grpc::ClientContext* context, const ::demo::Request& request, ::demo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Register_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Register_, context, request, false);
}

::grpc::Status ServerService::Stub::Login(::grpc::ClientContext* context, const ::demo::Request& request, ::demo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Login_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::AsyncLoginRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::PrepareAsyncLoginRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Login_, context, request, false);
}

::grpc::Status ServerService::Stub::Logout(::grpc::ClientContext* context, const ::demo::Request& request, ::demo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Logout_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::AsyncLogoutRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::PrepareAsyncLogoutRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Logout_, context, request, false);
}

::grpc::Status ServerService::Stub::Interact(::grpc::ClientContext* context, const ::demo::Request& request, ::demo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_Interact_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::AsyncInteractRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Interact_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ServerService::Stub::PrepareAsyncInteractRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_Interact_, context, request, false);
}

ServerService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::demo::Request, ::demo::Response>(
          std::mem_fn(&ServerService::Service::Register), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::demo::Request, ::demo::Response>(
          std::mem_fn(&ServerService::Service::Login), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::demo::Request, ::demo::Response>(
          std::mem_fn(&ServerService::Service::Logout), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ServerService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ServerService::Service, ::demo::Request, ::demo::Response>(
          std::mem_fn(&ServerService::Service::Interact), this)));
}

ServerService::Service::~Service() {
}

::grpc::Status ServerService::Service::Register(::grpc::ServerContext* context, const ::demo::Request* request, ::demo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::Login(::grpc::ServerContext* context, const ::demo::Request* request, ::demo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::Logout(::grpc::ServerContext* context, const ::demo::Request* request, ::demo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ServerService::Service::Interact(::grpc::ServerContext* context, const ::demo::Request* request, ::demo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ClientService_method_names[] = {
  "/demo.ClientService/KickOff",
};

std::unique_ptr< ClientService::Stub> ClientService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClientService::Stub> stub(new ClientService::Stub(channel));
  return stub;
}

ClientService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_KickOff_(ClientService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClientService::Stub::KickOff(::grpc::ClientContext* context, const ::demo::Request& request, ::demo::Response* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_KickOff_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ClientService::Stub::AsyncKickOffRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_KickOff_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::demo::Response>* ClientService::Stub::PrepareAsyncKickOffRaw(::grpc::ClientContext* context, const ::demo::Request& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::demo::Response>::Create(channel_.get(), cq, rpcmethod_KickOff_, context, request, false);
}

ClientService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClientService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClientService::Service, ::demo::Request, ::demo::Response>(
          std::mem_fn(&ClientService::Service::KickOff), this)));
}

ClientService::Service::~Service() {
}

::grpc::Status ClientService::Service::KickOff(::grpc::ServerContext* context, const ::demo::Request* request, ::demo::Response* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace demo

